<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="CMakeLists_8txt_1a05da3bf0375a852a4157d2ddce202a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cmake_minimum_required</definition>
        <argsstring>(VERSION 2.8.11) find_package(Boost COMPONENTS REQUIRED filesystem program_options system) if(Boost_FOUND) include_directories($</argsstring>
        <name>cmake_minimum_required</name>
        <param>
          <type>VERSION 2.8.</type>
          <declname>11</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="1" column="1" bodyfile="CMakeLists.txt" bodystart="1" bodyend="5"/>
      </memberdef>
      <memberdef kind="function" id="CMakeLists_8txt_1a3756f0befbfcde3ab43fd2d899197f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>endif</definition>
        <argsstring>() option(USE_GDAL_2&quot;Use GDAL 2.0&quot;ON) if(USE_GDAL_2) set(GDAL_ROOT $</argsstring>
        <name>endif</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="6" column="1" bodyfile="CMakeLists.txt" bodystart="6" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="CMakeLists_8txt_1a510087fb3156c3b69ac3f32ca5240e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gdal</type>
        <definition>gdal set</definition>
        <argsstring>(GDAL_LIBRARY_DIR ${GDAL_ROOT}/lib64) find_library(GDAL_LIBRARY NAMES gdal libgdal PATHS $</argsstring>
        <name>set</name>
        <param>
          <type>GDAL_LIBRARY_DIR ${GDAL_ROOT}/</type>
          <declname>lib64</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="14" column="1" bodyfile="CMakeLists.txt" bodystart="14" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="CMakeLists_8txt_1a52eed4eed81f2d2d91d4f555cc57ad95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NO_DEFAULT_PATH</type>
        <definition>NO_DEFAULT_PATH if</definition>
        <argsstring>(GDAL_LIBRARY) set(GDAL_FOUND TRUE) else(GDAL_LIBRARY) set(GDAL_FOUND FALSE) endif(GDAL_LIBRARY) if(GDAL_FOUND) message(&quot;-- Using project-sepcific GDAL&quot;) message(&quot;-- Found GDAL</argsstring>
        <name>if</name>
        <param>
          <type>GDAL_LIBRARY</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="20" column="1" bodyfile="CMakeLists.txt" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="CMakeLists_8txt_1aafcd59d00b488b7842498c771de6bedb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>set</definition>
        <argsstring>(GDAL_INCLUDE_DIR ${GDAL_ROOT}/include) include_directories($</argsstring>
        <name>set</name>
        <param>
          <type>GDAL_INCLUDE_DIR ${GDAL_ROOT}/</type>
          <declname>include</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="29" column="1" bodyfile="CMakeLists.txt" bodystart="29" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="CMakeLists_8txt_1adc5310f9ceecb2ef8540f5ed4cd16fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>else</definition>
        <argsstring>() message(&quot;-- Looking for GDAL in system&quot;) find_package(GDAL REQUIRED) include_directories($</argsstring>
        <name>else</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="32" column="1" bodyfile="CMakeLists.txt" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="CMakeLists_8txt_1a6cf53e73d4b742335f12ef221b2b825f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>endif</definition>
        <argsstring>(USE_GDAL_2) set(SOURCE_FILES io.cpp../include/io.h) add_library(geodrill SHARED $</argsstring>
        <name>endif</name>
        <param>
          <type>USE_GDAL_2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="40" column="1" bodyfile="CMakeLists.txt" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="CMakeLists_8txt_1a9313a95f55616034447d5f8ee717cb94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>target_link_libraries</definition>
        <argsstring>(geodrill ${Boost_LIBRARIES}${GDAL_LIBRARY}) set(SOURCE_FILES main.cpp file_utils.cpp../include/GeoDrillConfig.h../include/file_utils.h) add_executable(geodrill-cli $</argsstring>
        <name>target_link_libraries</name>
        <param>
          <type>geodrill ${Boost_LIBRARIES}${GDAL_LIBRARY}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="44" column="1" bodyfile="CMakeLists.txt" bodystart="44" bodyend="47"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">cmake_minimum_required(VERSION<sp/>2.8.11)</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">find_package(Boost<sp/>COMPONENTS<sp/>REQUIRED<sp/>filesystem<sp/>program_options<sp/>system)</highlight></codeline>
<codeline lineno="4"><highlight class="normal">if<sp/>(Boost_FOUND)</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>include_directories(${Boost_INCLUDE_DIR})</highlight></codeline>
<codeline lineno="6"><highlight class="normal">endif<sp/>()</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Use<sp/>GDAL<sp/>2.0<sp/>(potentially<sp/>in<sp/>unconventional<sp/>place)?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">option<sp/>(USE_GDAL_2<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>GDAL<sp/>2.0&quot;</highlight><highlight class="normal"><sp/>ON)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_GDAL_2)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#<sp/>Set<sp/>custom<sp/>library<sp/>dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(GDAL_ROOT<sp/>${PROJECT_3RDPARTY_PATH}/gdal)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(GDAL_LIBRARY_DIR<sp/>${GDAL_ROOT}/lib64)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>Try<sp/>looking<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>custom<sp/>build<sp/>of<sp/>GDAL<sp/>in<sp/>GeoDrill/lib,<sp/>in<sp/>practice<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>means<sp/>GDAL<sp/>&gt;<sp/>2.0<sp/>which<sp/>is<sp/>needed</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>some<sp/>functionality.<sp/>If<sp/>it</highlight><highlight class="stringliteral">&apos;s<sp/>not<sp/>around,<sp/>try<sp/>looking<sp/>for<sp/>a<sp/>regular<sp/>system-wide<sp/>installation<sp/>of<sp/>GDAL.</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>find_library(GDAL_LIBRARY<sp/>NAMES<sp/>gdal<sp/>libgdal<sp/>PATHS<sp/>${GDAL_LIBRARY_DIR}<sp/>NO_DEFAULT_PATH)</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(GDAL_LIBRARY)</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set(GDAL_FOUND<sp/>TRUE)</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else(GDAL_LIBRARY)</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set(GDAL_FOUND<sp/>FALSE)</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>endif(GDAL_LIBRARY)</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(GDAL_FOUND)</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(&quot;--<sp/>Using<sp/>project-sepcific<sp/>GDAL&quot;)</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(&quot;--<sp/>Found<sp/>GDAL:<sp/>${GDAL_LIBRARY}&quot;)</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set(GDAL_INCLUDE_DIR<sp/>${GDAL_ROOT}/include)</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_directories(${GDAL_INCLUDE_DIR})</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>Fall<sp/>back<sp/>on<sp/>system<sp/>lib</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else()</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(&quot;--<sp/>Looking<sp/>for<sp/>GDAL<sp/>in<sp/>system&quot;)</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_package(GDAL<sp/>REQUIRED)</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_directories(${GDAL_INCLUDE_DIR})</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>endif()</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">else(USE_GDAL_2)</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>find_package(GDAL<sp/>REQUIRED)</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>include_directories(${GDAL_INCLUDE_DIR})</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">endif(USE_GDAL_2)</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">set(SOURCE_FILES<sp/>io.cpp<sp/>../include/io.h)</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">add_library(geodrill<sp/>SHARED<sp/>${SOURCE_FILES})</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">target_link_libraries(geodrill<sp/>${Boost_LIBRARIES}<sp/>${GDAL_LIBRARY})</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">set(SOURCE_FILES<sp/>main.cpp<sp/>file_utils.cpp<sp/>../include/GeoDrillConfig.h<sp/>../include/file_utils.h)</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral">add_executable(geodrill-cli<sp/>${SOURCE_FILES})</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">target_link_libraries(geodrill-cli<sp/>geodrill<sp/>${Boost_LIBRARIES})</highlight></codeline>
    </programlisting>
    <location file="CMakeLists.txt"/>
  </compounddef>
</doxygen>
